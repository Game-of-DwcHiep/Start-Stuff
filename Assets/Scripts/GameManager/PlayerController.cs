using UnityEngine;

[RequireComponent(typeof(Rigidbody))]
[RequireComponent(typeof(BoxCollider))]
public class PlayerController : MonoSingleton<PlayerController>
{
    [Header("Movement Settings")]
    public float moveSpeed = 5f;

    [Header("Pickup Settings")]
    public Transform holdPoint;             // V·ªã tr√≠ ƒë·ªÉ c·∫ßm box
    public Transform dropPoint;             // V·ªã tr√≠ ƒë·ªÉ th·∫£ box
    public KeyCode pickupKey = KeyCode.Space; // Ph√≠m nh·∫∑t / th·∫£

    private Rigidbody rb;
    private Vector3 moveDir;
    private Vector3 contactNormal;
    private bool isColliding = false;

    private BoxHighlighter nearbyBox;   // Box g·∫ßn player
    private BoxHighlighter carriedBox;  // Box ƒëang ƒë∆∞·ª£c c·∫ßm

    public bool carriedBoxStatus = false;
    public BoxSlot nearbySlot;

    public BoxSlot2 nearbySlot2;

    public bool wingame = false;


    void Start()
    {
        rb = GetComponent<Rigidbody>();
        rb.freezeRotation = true; // tr√°nh b·ªã nghi√™ng
    }

    void Update()
    {
        HandleMovementInput();
        HandlePickupInput();
    }

    void FixedUpdate()
    {
        MovePlayer();
    }

    // =============================
    // üéÆ X·ª≠ l√Ω di chuy·ªÉn
    // =============================
    void HandleMovementInput()
    {
        float h = Input.GetAxisRaw("Horizontal");
        float v = Input.GetAxisRaw("Vertical");
        moveDir = new Vector3(h, 0, v).normalized;

        if (moveDir != Vector3.zero)
        {
            transform.rotation = Quaternion.LookRotation(-moveDir);
        }
    }

    void MovePlayer()
    {
        if (moveDir == Vector3.zero) return;

        Vector3 finalDir = moveDir;

         if (isColliding)
         {
             // Cho ph√©p tr∆∞·ª£t d·ªçc t∆∞·ªùng
             finalDir = Vector3.ProjectOnPlane(moveDir, contactNormal).normalized;
         }
        rb.MovePosition(rb.position + finalDir * moveSpeed * Time.fixedDeltaTime);
    }

    void OnCollisionStay(Collision collision)
    {
        isColliding = true;
        contactNormal = collision.contacts[0].normal;
    }

    void OnCollisionExit(Collision collision)
    {
        isColliding = false;
    }

    // =============================
    // üì¶ X·ª≠ l√Ω nh·∫∑t v√† th·∫£ box
    // =============================
    void HandlePickupInput()
    {
        if (Input.GetKeyDown(pickupKey))
        {
            if(wingame) 
            {
                WinGame();
                return;
            }

            if (carriedBox == null && nearbyBox != null)
            {
                PickupBox(nearbyBox);
            }
            else if (carriedBox != null)
            {
                DropBox();
            }
        }
    }
    void WinGame()
    {
        Debug.Log("üéâ YOU WIN!"); // b·∫°n c√≥ th·ªÉ thay b·∫±ng UI ho·∫∑c animation sau n√†y

        // ‚öôÔ∏è N·∫øu b·∫°n c√≥ scene qu·∫£n l√Ω, c√≥ th·ªÉ g·ªçi h√†m
        // GameManager.Instance.WinGame(); 
        // ho·∫∑c load scene chi·∫øn th·∫Øng:
        // SceneManager.LoadScene("WinScene");
    }

    void PickupBox(BoxHighlighter box)
    {
        isColliding = false;
        carriedBox = box;
        box.SetPickedUp(true);

        // üîπ T·∫Øt t·∫•t c·∫£ collider trong box (c·∫£ con)
        foreach (var c in box.GetComponentsInChildren<Collider>())
            c.enabled = false;

        // üîπ G·∫Øn box l√™n tay player
        box.transform.SetParent(holdPoint);
        box.transform.localPosition = Vector3.zero;
        box.transform.localRotation = Quaternion.identity;
        if (nearbySlot != null)
        {
            nearbySlot.SetBox(false);
            nearbySlot.boxHighlighter = null;
        }   

        carriedBoxStatus = true;
    }

    // void DropBox()
    // {
    //     isColliding = false;
    //     if (carriedBox == null)
    //         return;

    //     carriedBox.SetPickedUp(false);

    //     // B·∫≠t l·∫°i collider
    //     foreach (var c in carriedBox.GetComponentsInChildren<Collider>())
    //         c.enabled = true;

    //     // N·∫øu player ƒëang g·∫ßn slot ‚Üí ƒë·∫∑t box v√†o ƒë√≥
    //     if (nearbySlot != null)
    //     {
    //         carriedBox.transform.SetParent(null);
    //         carriedBox.transform.position = nearbySlot.GetSlotPosition();
    //         nearbySlot.SetBox(true); // th√¥ng b√°o slot ƒë√£ c√≥ box
    //         nearbySlot.boxHighlighter = carriedBox; // li√™n k·∫øt slot v·ªõi box√ç
    //     }
    //     else
    //     {
    //         // Th·∫£ xu·ªëng b√¨nh th∆∞·ªùng
    //         carriedBox.transform.SetParent(null);
    //         carriedBox.transform.position = dropPoint.position;
    //     }

    //     carriedBox = null;
    //     carriedBoxStatus = false;
    // }

    void DropBox()
    {
        if (carriedBox == null)
            return;

        carriedBox.SetPickedUp(false);

        // b·∫≠t l·∫°i collider
        foreach (var c in carriedBox.GetComponentsInChildren<Collider>())
            c.enabled = true;
        if (nearbySlot != null)
        {
            carriedBox.transform.SetParent(null);
            carriedBox.transform.position = nearbySlot.GetSlotPosition();
            nearbySlot.SetBox(true); // th√¥ng b√°o slot ƒë√£ c√≥ box
            nearbySlot.boxHighlighter = carriedBox; // li√™n k·∫øt slot v·ªõi box√ç
        }
        // üîπ N·∫øu ƒëang g·∫ßn slot v√† slot tr·ªëng ‚Üí ƒë·∫∑t box v√†o ƒë√≥
        else if (nearbySlot2 != null && !nearbySlot2.hasBox)
        {
            nearbySlot2.PlaceBox(carriedBox.gameObject);
        }
        else
        {
            // üîπ Th·∫£ xu·ªëng b√¨nh th∆∞·ªùng
            carriedBox.transform.SetParent(null);
            carriedBox.transform.position = dropPoint.position;
        }

        carriedBox = null;
        carriedBoxStatus = false;
    }

    // üìç Li√™n k·∫øt v·ªõi BoxTriggerZone (gi·ªØ nguy√™n)
    public void SetNearbyBox(BoxHighlighter box)
    {
        nearbyBox = box;
    }

    public void ClearNearbyBox(BoxHighlighter box)
    {
        if (nearbyBox == box)
            nearbyBox = null;
    }
    // =============================
    // üìç Li√™n k·∫øt v·ªõi BoxSlot
    // =============================
    public void SetNearbySlot(BoxSlot slot)
    {
        nearbySlot = slot;
        
    }

    public void ClearNearbySlot(BoxSlot slot)
    {
        if (nearbySlot == slot)
            nearbySlot = null;
    }

    // =============================
    // üìç Li√™n k·∫øt v·ªõi BoxSlot
    // =============================
    public void SetNearbySlot2(BoxSlot2 slot)
    {
        nearbySlot2 = slot;
        
    }

    public void ClearNearbySlot2(BoxSlot2 slot)
    {
        if (nearbySlot2 == slot)
            nearbySlot2 = null;
    }



}
