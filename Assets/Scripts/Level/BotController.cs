using System.Collections;
using UnityEngine;

[RequireComponent(typeof(Rigidbody))]
[RequireComponent(typeof(BoxCollider))]
public class BotController : MonoBehaviour
{
    [Header("Movement Settings")]
    public float speed = 3f;

    [Header("Pickup Settings")]
    public Transform holdPoint;             
    public Transform dropPoint;             

    private Rigidbody rb;

    private BoxHighlighter carriedBox;      
    public BoxSlot nearbySlot;              
    public BoxHighlighter nearbyBox;       

    void Start()
    {
        rb = GetComponent<Rigidbody>();
        rb.freezeRotation = true;
    }

    // =============================
    //  Di chuy·ªÉn t·ª± ƒë·ªông
    // =============================
    // public IEnumerator MoveTo(Vector3 target)
    // {
    //     Vector3 direction = (target - transform.position).normalized;
    //     transform.rotation = Quaternion.LookRotation(-direction);
    //     while (Vector3.Distance(transform.position, target) > 0.1f)
    //     {         
    //         direction = (target - transform.position).normalized;
    //         rb.MovePosition(rb.position + direction * speed * Time.deltaTime);
    //         yield return null;
    //     }
    //     if(nearbySlot != null)
    //         nearbySlot.SetBox(false);
    // }

    // public IEnumerator MoveTo(Vector3 target)
    // {
    //     // 1Ô∏è‚É£ Di chuy·ªÉn theo tr·ª•c X tr∆∞·ªõc
    //     Vector3 start = transform.position;

    //     // di chuy·ªÉn tr√™n tr·ª•c X
    //     while (Mathf.Abs(transform.position.x - target.x) > 0.05f)
    //     {
    //         float directionX = Mathf.Sign(target.x - transform.position.x);
    //         Vector3 moveDir = new Vector3(directionX, 0, 0);
    //         transform.rotation = Quaternion.LookRotation(-moveDir);
    //         rb.MovePosition(rb.position + moveDir * speed * Time.deltaTime);
    //         yield return null;
    //     }

    //     // 2Ô∏è‚É£ Sau ƒë√≥ di chuy·ªÉn theo tr·ª•c Z
    //     while (Mathf.Abs(transform.position.z - target.z) > 0.05f)
    //     {
    //         float directionZ = Mathf.Sign(target.z - transform.position.z);
    //         Vector3 moveDir = new Vector3(0, 0, directionZ);
    //         transform.rotation = Quaternion.LookRotation(-moveDir);
    //         rb.MovePosition(rb.position + moveDir * speed * Time.deltaTime);
    //         yield return null;
    //     }

    //     // Gi·ªØ nguy√™n Y (tr√°nh thay ƒë·ªïi ƒë·ªô cao)
    //     transform.position = new Vector3(target.x, start.y, target.z);

    //     // ‚úÖ D·ª´ng l·∫°i ho√†n to√†n khi ƒë·∫øn n∆°i
    //     rb.linearVelocity = Vector3.zero;

    //     if (nearbySlot != null)
    //         nearbySlot.SetBox(false);
    // }

    public IEnumerator MoveTo(Vector3 target)
    {
        Vector3 start = transform.position;
        Vector3 current = start;

        // Gi·ªõi h·∫°n v√≤ng l·∫∑p (ph√≤ng tr√°nh l·ªói v√¥ h·∫°n)
        int safetyCounter = 0;

        while (Vector3.Distance(current, target) > 0.1f && safetyCounter < 500)
        {
            safetyCounter++;

            // T√≠nh h∆∞·ªõng di chuy·ªÉn ch√≠nh (theo tr·ª•c l·ªõn h∆°n)
            Vector3 diff = target - current;
            Vector3 moveDir = Vector3.zero;

            // Ch·ªçn tr·ª•c n√†o c√≤n xa h∆°n
            if (Mathf.Abs(diff.x) > Mathf.Abs(diff.z))
                moveDir = new Vector3(Mathf.Sign(diff.x), 0, 0);
            else
                moveDir = new Vector3(0, 0, Mathf.Sign(diff.z));

            // Ki·ªÉm tra xem h∆∞·ªõng ƒë√≥ c√≥ b·ªã ch·∫∑n kh√¥ng
            if (Physics.Raycast(current + Vector3.up * 0.5f, moveDir, out RaycastHit hit, 1f))
            {
                // N·∫øu b·ªã ch·∫∑n, th·ª≠ ƒë·ªïi tr·ª•c
                Vector3 altDir = (moveDir.x != 0) ? new Vector3(0, 0, Mathf.Sign(diff.z)) : new Vector3(Mathf.Sign(diff.x), 0, 0);

                // N·∫øu h∆∞·ªõng ph·ª• kh√¥ng b·ªã ch·∫∑n ‚Üí ƒëi h∆∞·ªõng ƒë√≥
                if (!Physics.Raycast(current + Vector3.up * 0.5f, altDir, 1f))
                {
                    moveDir = altDir;
                }
                else
                {
                    // N·∫øu c·∫£ hai h∆∞·ªõng ƒë·ªÅu b·ªã ch·∫∑n ‚Üí d·ª´ng
                    Debug.LogWarning("üöß Bot b·ªã k·∫πt t·∫°i " + current);
                    yield break;
                }
            }

            // Xoay bot theo h∆∞·ªõng di chuy·ªÉn
            transform.rotation = Quaternion.LookRotation(-moveDir);

            // Di chuy·ªÉn d·∫ßn d·∫ßn t·ªõi b∆∞·ªõc ti·∫øp theo
            Vector3 nextPos = current + moveDir;
            while (Vector3.Distance(transform.position, nextPos) > 0.05f)
            {
                rb.MovePosition(Vector3.MoveTowards(rb.position, nextPos, speed * Time.deltaTime));
                yield return null;
            }

            current = nextPos; // c·∫≠p nh·∫≠t v·ªã tr√≠ m·ªõi
        }

        rb.linearVelocity = Vector3.zero;
        transform.position = new Vector3(target.x, start.y, target.z);
        if (nearbySlot != null)
            nearbySlot.SetBox(false);
    }


    // =============================
    //  H√†nh ƒë·ªông: Nh·∫∑t box
    // =============================
    public IEnumerator PickUp( Vector3 targetPosition)
    {

        while (nearbyBox == null)
        {
            Vector3 direction = (targetPosition - transform.position).normalized;
            transform.rotation = Quaternion.LookRotation(-direction);
            rb.MovePosition(rb.position + direction * speed * Time.deltaTime);
            yield return null;
        }
        // 2Ô∏è‚É£ Khi ƒë√£ nh·∫≠n ƒë∆∞·ª£c nearbyBox ‚Üí nh·∫∑t box
        if (nearbyBox != null)
        {
            carriedBox = nearbyBox;
            nearbyBox.SetPickedUp(true);

            // üîπ T·∫Øt collider
            foreach (var c in nearbyBox.GetComponentsInChildren<Collider>())
                c.enabled = false;

            // üîπ G·∫Øn box l√™n tay bot
            nearbyBox.transform.SetParent(holdPoint);
            nearbyBox.transform.localPosition = Vector3.zero;
            nearbyBox.transform.localRotation = Quaternion.identity;

            // üîπ Reset nearbyBox (ƒë·ªÉ tr√°nh trigger l·∫°i nh·∫∑t)
            nearbyBox = null;
        }
    }

    public IEnumerator DropAt(Vector3 targetPosition)
    {
        if (carriedBox == null)
            yield break;

        while (nearbySlot == null)
        {
            Vector3 direction = (targetPosition - transform.position).normalized;
            transform.rotation = Quaternion.LookRotation(-direction);
            rb.MovePosition(rb.position + direction * speed * Time.deltaTime);
            yield return null;
        }

        // 2Ô∏è‚É£ Khi ƒë√£ ƒë·∫øn slot ‚Üí th·∫£ box xu·ªëng
        if (nearbySlot != null)
        {
            carriedBox.SetPickedUp(false);

            foreach (var c in carriedBox.GetComponentsInChildren<Collider>())
                c.enabled = true;

            carriedBox.transform.SetParent(null);
            carriedBox.transform.position = nearbySlot.GetSlotPosition();

            nearbySlot.SetBox(true);
            nearbySlot.boxHighlighter = carriedBox;

            carriedBox = null;
            nearbySlot = null;
        }
    }

    // =============================
    //  G·∫Øn slot / box g·∫ßn nh·∫•t t·ª´ trigger
    // =============================
    public void SetNearbySlot(BoxSlot slot)
    {
        nearbySlot = slot;
    }

    public void SetNearbyBox(BoxHighlighter box)
    {
        nearbyBox = box;
    }

    public void ClearNearbySlot(BoxSlot slot)
    {
        if (nearbySlot == slot)
            nearbySlot = null;
    }

    public void ClearNearbyBox(BoxHighlighter box)
    {
        if (nearbyBox == box)
            nearbyBox = null;
    }
}
