
using Pathfinding;
using System.Collections;
using UnityEngine;

public class BotController : MonoBehaviour
{
    public Transform holdPoint;

    private IAstarAI ai;
    private Rigidbody rb;

    public BoxHighlighter carriedBox;
    public BoxSlot nearbySlot;
    public BoxHighlighter nearbyBox;
    public bool isStop = true;

    private void Start()
    {
        rb = GetComponent<Rigidbody>();
        ai = GetComponent<IAstarAI>();
        rb.freezeRotation = true;
    }

    // ‚úÖ Ki·ªÉm tra c√≥ th·ªÉ di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ hay kh√¥ng
    public bool CanReach(Vector3 targetPosition)
    {
        var startNode = AstarPath.active.GetNearest(transform.position).node;
        var endNode = AstarPath.active.GetNearest(targetPosition).node;
        if (startNode == null || endNode == null) return false;
        return Pathfinding.PathUtilities.IsPathPossible(startNode, endNode);
    }

    // ‚úÖ Di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ b·∫±ng A* (t·ª± ƒë·ªông)
    public IEnumerator MoveTo(Vector3 targetPosition)
    {
        if (!CanReach(targetPosition))
        {
            Debug.LogWarning("‚ö†Ô∏è Kh√¥ng c√≥ ƒë∆∞·ªùng ƒë·∫øn v·ªã tr√≠ n√†y!");
            yield break;
        }

        ai.destination = targetPosition;
        ai.SearchPath();
        isStop = false;

        var aipath = ai as AIPath;

        while (ai.pathPending || aipath.remainingDistance > aipath.endReachedDistance)
        {
            yield return null;
        }   

        isStop = true;
    }
    public IEnumerator PickUp(Vector3 targetPosition)
    {
        // T·∫°m disable collider c·ªßa box target tr∆∞·ªõc khi ƒëi
        if (nearbyBox != null)
        {
            foreach (var c in nearbyBox.GetComponentsInChildren<Collider>())
                c.enabled = false;
        }

        // Di chuy·ªÉn ƒë·∫øn box (d√πng pathfinding)
        ai.destination = targetPosition;
        ai.SearchPath();
        isStop = false;

        var aipath = ai as AIPath;

        while (nearbyBox == null && (ai.pathPending || aipath.remainingDistance > aipath.endReachedDistance))
        {
            yield return null;
        }
        isStop = true;
        // Khi ƒë·∫øn n∆°i -> nh·∫∑t box
        if (nearbyBox != null)
        {
            carriedBox = nearbyBox;
            nearbyBox.SetPickedUp(true);

            // G·∫Øn box l√™n tay bot
            nearbyBox.transform.SetParent(holdPoint);
            nearbyBox.transform.localPosition = Vector3.zero;
            nearbyBox.transform.localRotation = Quaternion.identity;
            nearbyBox = null;
        }
    }

    // ‚úÖ H√†nh ƒë·ªông th·∫£ box
    public IEnumerator DropAt(Vector3 targetPosition)
    {
        if (carriedBox == null)
        {
            Debug.LogWarning("‚ùå Kh√¥ng c√≥ box n√†o ƒë·ªÉ th·∫£!");
            yield break;
        }

        // üîπ Di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ target
        ai.destination = targetPosition;
        ai.SearchPath();
        isStop = false;

        var aipath = ai as AIPath;

        // üî∏ Ch·ªâ ti·∫øp t·ª•c di chuy·ªÉn khi ch∆∞a v√†o v√πng slot
        while (nearbySlot == null && (ai.pathPending || aipath.remainingDistance > aipath.endReachedDistance))
        {
            yield return null;
        }

        // üî∏ Khi ph√°t hi·ªán slot, d·ª´ng l·∫°i
        isStop = true;
        ai.destination = transform.position; // d·ª´ng di chuy·ªÉn ho√†n to√†n

        if (nearbySlot == null)
        {
            Debug.LogWarning("‚ùå Kh√¥ng t√¨m th·∫•y slot ƒë·ªÉ th·∫£ box!");
            yield break;
        }

        // ==========================
        //  TH·∫¢ BOX V√ÄO SLOT
        // ==========================
        carriedBox.SetPickedUp(false);

        foreach (var c in carriedBox.GetComponentsInChildren<Collider>())
            c.enabled = true;

        // üîπ G·∫Øn box v√†o slot
        carriedBox.transform.SetParent(nearbySlot.transform);
        carriedBox.transform.localPosition = Vector3.zero + Vector3.forward * 0.5f; // n√¢ng l√™n m·ªôt ch√∫t cho ƒë·∫πp
        carriedBox.transform.localRotation = Quaternion.identity;

        // üîπ C·∫≠p nh·∫≠t tr·∫°ng th√°i slot
        nearbySlot.SetBox(true);
        nearbySlot.boxHighlighter = carriedBox;

        // üîπ Reset l·∫°i bi·∫øn t·∫°m
        carriedBox = null;
        nearbySlot = null;

        Debug.Log("‚úÖ ƒê√£ th·∫£ box th√†nh c√¥ng v√†o slot!");
    }



    // =============================
    //  G·∫Øn slot / box g·∫ßn nh·∫•t t·ª´ trigger
    // =============================
    public void SetNearbySlot(BoxSlot slot)
    {
        nearbySlot = slot;
    }

    public void SetNearbyBox(BoxHighlighter box)
    {
        nearbyBox = box;
    }

    public void ClearNearbySlot(BoxSlot slot)
    {
        if (nearbySlot == slot)
            nearbySlot = null;
    }

    public void ClearNearbyBox(BoxHighlighter box)
    {
        if (nearbyBox == box)
            nearbyBox = null;
    }
}
