// using Pathfinding;
// using System.Collections;
// using UnityEngine;

// //[RequireComponent(typeof(Rigidbody))]
// //[RequireComponent(typeof(BoxCollider))]
// public class BotController : MonoBehaviour
// {
//     [Header("Movement Settings")]
//     public float speed = 3f;

//     [Header("Pickup Settings")]
//     public Transform holdPoint;             
//     public Transform dropPoint;             

//     private Rigidbody rb;

//     private BoxHighlighter carriedBox;      
//     public BoxSlot nearbySlot;              
//     public BoxHighlighter nearbyBox;

//     public Transform transformCurrent;
//     public Transform target;
//     IAstarAI ai;
//     public bool isStop = true;

//     void Start()
//     {
//         rb = GetComponent<Rigidbody>();
//         rb.freezeRotation = true;
//         isStop = true;
//     }
//     void OnEnable()
//     {
//         ai = GetComponent<IAstarAI>();
//         if (ai != null) ai.onSearchPath += Update;
//     }

//     void OnDisable()
//     {
//         if (ai != null) ai.onSearchPath -= Update;
//         isStop = true;
//     }

//     /// <summary>Updates the AI's destination every frame</summary>
//     void Update()
//     {
//         if (target != null && ai != null && !isStop) ai.destination = target.position;
//     }

//     public bool CanReach(Vector3 targetPosition)
//     {
//         // L·∫•y nearest node c·ªßa bot v√† target
//         var startNode = AstarPath.active.GetNearest(transform.position).node;
//         var endNode = AstarPath.active.GetNearest(targetPosition).node;

//         // Ki·ªÉm tra n·∫øu m·ªôt trong hai node null ‚Üí kh√¥ng th·ªÉ ƒëi
//         if (startNode == null || endNode == null)
//             return false;

//         // Ki·ªÉm tra c√≥ k·∫øt n·ªëi hay kh√¥ng
//         return PathUtilities.IsPathPossible(startNode, endNode);
//     }

//     public IEnumerator PickUp(Vector3 targetPosition)
//     {
//         // üîπ Ki·ªÉm tra xem c√≥ ƒë∆∞·ªùng kh√¥ng
//         if (!CanReach(targetPosition))
//         {
//             Debug.LogWarning("‚ùå Bot kh√¥ng th·ªÉ di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ pickup!");
//             yield break;
//         }

//         // üîπ Di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ box
//         while (nearbyBox == null)
//         {
//             Vector3 direction = (targetPosition - transform.position).normalized;
//             transform.rotation = Quaternion.LookRotation(-direction);
//             rb.MovePosition(rb.position + direction * speed * Time.deltaTime);
//             yield return null;
//         }

//         // üîπ Khi t·ªõi g·∫ßn box
//         if (nearbyBox != null)
//         {
//             carriedBox = nearbyBox;
//             nearbyBox.SetPickedUp(true);

//             foreach (var c in nearbyBox.GetComponentsInChildren<Collider>())
//                 c.enabled = false;

//             nearbyBox.transform.SetParent(holdPoint);
//             nearbyBox.transform.localPosition = Vector3.zero;
//             nearbyBox.transform.localRotation = Quaternion.identity;

//             nearbyBox = null;
//         }
//     }

//     public IEnumerator DropAt(Vector3 targetPosition)
//     {
//         if (carriedBox == null)
//             yield break;

//         if (!CanReach(targetPosition))
//         {
//             Debug.LogWarning("‚ùå Bot kh√¥ng th·ªÉ di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ drop!");
//             yield break;
//         }

//         while (nearbySlot == null)
//         {
//             Vector3 direction = (targetPosition - transform.position).normalized;
//             transform.rotation = Quaternion.LookRotation(-direction);
//             rb.MovePosition(rb.position + direction * speed * Time.deltaTime);
//             yield return null;
//         }

//         if (nearbySlot != null)
//         {
//             carriedBox.SetPickedUp(false);
//             foreach (var c in carriedBox.GetComponentsInChildren<Collider>())
//                 c.enabled = true;

//             carriedBox.transform.SetParent(null);
//             carriedBox.transform.position = nearbySlot.GetSlotPosition();

//             nearbySlot.SetBox(true);
//             nearbySlot.boxHighlighter = carriedBox;

//             carriedBox = null;
//             nearbySlot = null;
//         }
//     }


//     // public IEnumerator PickUp( Vector3 targetPosition)
//     // {

//     //     while (nearbyBox == null)
//     //     {
//     //         Vector3 direction = (targetPosition - transform.position).normalized;
//     //         transform.rotation = Quaternion.LookRotation(-direction);
//     //         rb.MovePosition(rb.position + direction * speed * Time.deltaTime);
//     //         yield return null;
//     //     }
//     //     // 2Ô∏è‚É£ Khi ƒë√£ nh·∫≠n ƒë∆∞·ª£c nearbyBox ‚Üí nh·∫∑t box
//     //     if (nearbyBox != null)
//     //     {
//     //         carriedBox = nearbyBox;
//     //         nearbyBox.SetPickedUp(true);

//     //         // üîπ T·∫Øt collider
//     //         foreach (var c in nearbyBox.GetComponentsInChildren<Collider>())
//     //             c.enabled = false;

//     //         // üîπ G·∫Øn box l√™n tay bot
//     //         nearbyBox.transform.SetParent(holdPoint);
//     //         nearbyBox.transform.localPosition = Vector3.zero;
//     //         nearbyBox.transform.localRotation = Quaternion.identity;

//     //         // üîπ Reset nearbyBox (ƒë·ªÉ tr√°nh trigger l·∫°i nh·∫∑t)
//     //         nearbyBox = null;
//     //     }
//     // }

//     // public IEnumerator DropAt(Vector3 targetPosition)
//     // {
//     //     if (carriedBox == null)
//     //         yield break;

//     //     while (nearbySlot == null)
//     //     {
//     //         Vector3 direction = (targetPosition - transform.position).normalized;
//     //         transform.rotation = Quaternion.LookRotation(-direction);
//     //         rb.MovePosition(rb.position + direction * speed * Time.deltaTime);
//     //         yield return null;
//     //     }

//     //     // 2Ô∏è‚É£ Khi ƒë√£ ƒë·∫øn slot ‚Üí th·∫£ box xu·ªëng
//     //     if (nearbySlot != null)
//     //     {
//     //         carriedBox.SetPickedUp(false);

//     //         foreach (var c in carriedBox.GetComponentsInChildren<Collider>())
//     //             c.enabled = true;

//     //         carriedBox.transform.SetParent(null);
//     //         carriedBox.transform.position = nearbySlot.GetSlotPosition();

//     //         nearbySlot.SetBox(true);
//     //         nearbySlot.boxHighlighter = carriedBox;

//     //         carriedBox = null;
//     //         nearbySlot = null;
//     //     }
//     // }

//     // =============================
//     //  G·∫Øn slot / box g·∫ßn nh·∫•t t·ª´ trigger
//     // =============================
//     public void SetNearbySlot(BoxSlot slot)
//     {
//         nearbySlot = slot;
//     }

//     public void SetNearbyBox(BoxHighlighter box)
//     {
//         nearbyBox = box;
//     }

//     public void ClearNearbySlot(BoxSlot slot)
//     {
//         if (nearbySlot == slot)
//             nearbySlot = null;
//     }

//     public void ClearNearbyBox(BoxHighlighter box)
//     {
//         if (nearbyBox == box)
//             nearbyBox = null;
//     }
// }

using Pathfinding;
using System.Collections;
using UnityEngine;

public class BotController : MonoBehaviour
{
    public Transform holdPoint;

    private IAstarAI ai;
    private Rigidbody rb;

    public BoxHighlighter carriedBox;
    public BoxSlot nearbySlot;
    public BoxHighlighter nearbyBox;
    public bool isStop = true;

    private void Start()
    {
        rb = GetComponent<Rigidbody>();
        ai = GetComponent<IAstarAI>();
        rb.freezeRotation = true;
    }

    // ‚úÖ Ki·ªÉm tra c√≥ th·ªÉ di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ hay kh√¥ng
    public bool CanReach(Vector3 targetPosition)
    {
        var startNode = AstarPath.active.GetNearest(transform.position).node;
        var endNode = AstarPath.active.GetNearest(targetPosition).node;
        if (startNode == null || endNode == null) return false;
        return Pathfinding.PathUtilities.IsPathPossible(startNode, endNode);
    }

    // ‚úÖ Di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ b·∫±ng A* (t·ª± ƒë·ªông)
    public IEnumerator MoveTo(Vector3 targetPosition)
    {
        if (!CanReach(targetPosition))
        {
            Debug.LogWarning("‚ö†Ô∏è Kh√¥ng c√≥ ƒë∆∞·ªùng ƒë·∫øn v·ªã tr√≠ n√†y!");
            yield break;
        }

        ai.destination = targetPosition;
        ai.SearchPath();
        isStop = false;

        var aipath = ai as AIPath;

        while (ai.pathPending || aipath.remainingDistance > aipath.endReachedDistance)
        {
            yield return null;
        }   

        isStop = true;
    }

    // ‚úÖ H√†nh ƒë·ªông nh·∫∑t box
    // public IEnumerator PickUp(Vector3 targetPosition)
    // {
    //     // 1Ô∏è‚É£ Di chuy·ªÉn t·ªõi v·ªã tr√≠ box
    //     yield return MoveTo(targetPosition);

    //     if (nearbyBox == null)
    //     {
    //         Debug.LogWarning("‚ùå Kh√¥ng c√≥ box n√†o ƒë·ªÉ nh·∫∑t!");
    //         yield break;
    //     }

    //     // 2Ô∏è‚É£ Nh·∫∑t box
    //     carriedBox = nearbyBox;
    //     nearbyBox.SetPickedUp(true);

    //     foreach (var c in nearbyBox.GetComponentsInChildren<Collider>())
    //         c.enabled = false;

    //     nearbyBox.transform.SetParent(holdPoint);
    //     nearbyBox.transform.position = Vector3.zero;
    //     nearbyBox.transform.rotation = Quaternion.identity;

    //     nearbyBox = null;

    //     Debug.Log("‚úÖ ƒê√£ nh·∫∑t box th√†nh c√¥ng!");
    // }

    public IEnumerator PickUp(Vector3 targetPosition)
    {
        // T·∫°m disable collider c·ªßa box target tr∆∞·ªõc khi ƒëi
        if (nearbyBox != null)
        {
            foreach (var c in nearbyBox.GetComponentsInChildren<Collider>())
                c.enabled = false;
        }

        // Di chuy·ªÉn ƒë·∫øn box (d√πng pathfinding)
        ai.destination = targetPosition;
        ai.SearchPath();
        isStop = false;

        var aipath = ai as AIPath;

        while (nearbyBox == null && (ai.pathPending || aipath.remainingDistance > aipath.endReachedDistance))
        {
            yield return null;
        }
        isStop = true;
        // Khi ƒë·∫øn n∆°i -> nh·∫∑t box
        if (nearbyBox != null)
        {
            Debug.LogError("aaa");
            carriedBox = nearbyBox;
            nearbyBox.SetPickedUp(true);

            // G·∫Øn box l√™n tay bot
            nearbyBox.transform.SetParent(holdPoint);
            nearbyBox.transform.localPosition = Vector3.zero;
            nearbyBox.transform.localRotation = Quaternion.identity;
            nearbyBox = null;
        }
    }

    // ‚úÖ H√†nh ƒë·ªông th·∫£ box
    public IEnumerator DropAt(Vector3 targetPosition)
    {
        if (carriedBox == null)
        {
            Debug.LogWarning("‚ùå Kh√¥ng c√≥ box n√†o ƒë·ªÉ th·∫£!");
            yield break;
        }

        // üîπ Di chuy·ªÉn ƒë·∫øn v·ªã tr√≠ target
        ai.destination = targetPosition;
        ai.SearchPath();
        isStop = false;

        var aipath = ai as AIPath;

        // üî∏ Ch·ªâ ti·∫øp t·ª•c di chuy·ªÉn khi ch∆∞a v√†o v√πng slot
        while (nearbySlot == null && (ai.pathPending || aipath.remainingDistance > aipath.endReachedDistance))
        {
            yield return null;
        }

        // üî∏ Khi ph√°t hi·ªán slot, d·ª´ng l·∫°i
        isStop = true;
        ai.destination = transform.position; // d·ª´ng di chuy·ªÉn ho√†n to√†n

        if (nearbySlot == null)
        {
            Debug.LogWarning("‚ùå Kh√¥ng t√¨m th·∫•y slot ƒë·ªÉ th·∫£ box!");
            yield break;
        }

        // ==========================
        //  TH·∫¢ BOX V√ÄO SLOT
        // ==========================
        carriedBox.SetPickedUp(false);

        foreach (var c in carriedBox.GetComponentsInChildren<Collider>())
            c.enabled = true;

        // üîπ G·∫Øn box v√†o slot
        carriedBox.transform.SetParent(nearbySlot.transform);
        carriedBox.transform.localPosition = Vector3.zero + Vector3.forward * 0.5f; // n√¢ng l√™n m·ªôt ch√∫t cho ƒë·∫πp
        carriedBox.transform.localRotation = Quaternion.identity;

        // üîπ C·∫≠p nh·∫≠t tr·∫°ng th√°i slot
        nearbySlot.SetBox(true);
        nearbySlot.boxHighlighter = carriedBox;

        // üîπ Reset l·∫°i bi·∫øn t·∫°m
        carriedBox = null;
        nearbySlot = null;

        Debug.Log("‚úÖ ƒê√£ th·∫£ box th√†nh c√¥ng v√†o slot!");
    }



    // =============================
    //  G·∫Øn slot / box g·∫ßn nh·∫•t t·ª´ trigger
    // =============================
    public void SetNearbySlot(BoxSlot slot)
    {
        nearbySlot = slot;
    }

    public void SetNearbyBox(BoxHighlighter box)
    {
        nearbyBox = box;
    }

    public void ClearNearbySlot(BoxSlot slot)
    {
        if (nearbySlot == slot)
            nearbySlot = null;
    }

    public void ClearNearbyBox(BoxHighlighter box)
    {
        if (nearbyBox == box)
            nearbyBox = null;
    }
}
